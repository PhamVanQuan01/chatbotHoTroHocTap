import os
from dotenv import load_dotenv
import streamlit as st
import google.generativeai as genai
import pytesseract
from PIL import Image
import PyPDF2
from docx import Document
# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ t·ªáp .env
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
print("API Key Loaded:", api_key)  # D√≤ng debug ƒë·ªÉ ki·ªÉm tra xem kh√≥a API c√≥ ƒë∆∞·ª£c t·∫£i kh√¥ng

# C·∫•u h√¨nh API c·ªßa Google Generative AI
genai.configure(api_key=api_key)  # ƒê·ªçc API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

# C·∫•u h√¨nh Tesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'  # ƒê∆∞·ªùng d·∫´n t·ªõi Tesseract

# C·∫•u h√¨nh chatbot
generation_config = {
    "temperature": 0.5,
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 2048,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

model = genai.GenerativeModel(model_name="gemini-1.5-flash-002",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

# Kh·ªüi t·∫°o tr·∫°ng th√°i chat
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])

if "history" not in st.session_state:
    st.session_state.history = []

# Giao di·ªán ·ª©ng d·ª•ng
st.set_page_config(page_title="Gemini Chatbot", page_icon="ü§ñ", layout="wide")

# ƒê·ªçc v√† ch√®n file CSS
with open("style.css", "r", encoding="utf-8") as f:
    css_content = f.read()
    st.markdown(f"<style>{css_content}</style>", unsafe_allow_html=True)


# Ti√™u ƒë·ªÅ trung t√¢m v·ªõi hi·ªáu ·ª©ng gradient
st.markdown('<h1>Gemini Learning Assist</h1>', unsafe_allow_html=True)

# C√°c c·ªôt, h√¨nh ·∫£nh v√† c√°c ph·∫ßn kh√°c trong ·ª©ng d·ª•ng


# S·ª≠ d·ª•ng st.image v√† ƒë·∫∑t ·∫£nh v√†o c√°c c·ªôt v·ªõi k√≠ch th∆∞·ªõc ƒë√£ gi·∫£m


col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
with col1: st.markdown('<a href="#" class="button-custom">ü§ñ Assistant</a>', unsafe_allow_html=True)
with col2: st.markdown('<a href="#" class="button-custom">üíª CodeAgent</a>', unsafe_allow_html=True)
with col3: st.markdown('<a href="#" class="button-custom">üîç Web-Search</a>', unsafe_allow_html=True)
with col4: st.markdown('<a href="#" class="button-custom">‚ûï More</a>', unsafe_allow_html=True)

# Sidebar v·ªõi vi·ªÅn xung quanh ph·∫ßn t√πy ch·ªçn c√¢u h·ªèi
st.sidebar.markdown("""<div class="sidebar-container"><h3 class="sidebar-title">T√πy ch·ªçn c√¢u h·ªèi</h3>""", unsafe_allow_html=True)

# Ch·ªçn ki·ªÉu c√¢u h·ªèi v√† s·ªë l∆∞·ª£ng c√¢u h·ªèi b√™n trong khung c√≥ vi·ªÅn
question_type = st.sidebar.radio("Ch·ªçn ki·ªÉu c√¢u h·ªèi:", ("C√¢u h·ªèi tr·∫Øc nghi·ªám", "C√¢u h·ªèi t·ª± lu·∫≠n"))
num_questions = st.sidebar.slider("Ch·ªçn s·ªë l∆∞·ª£ng c√¢u h·ªèi", 1, 20, 5)

st.sidebar.markdown("</div>", unsafe_allow_html=True)  # ƒê√≥ng khung

st.sidebar.divider()

# T·∫£i file
uploaded_file = st.file_uploader("T·∫£i l√™n file h√¨nh ·∫£nh, t√†i li·ªáu (PDF, Word)", type=["jpg", "jpeg", "png", "pdf", "docx"])

# Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ ch·ª©a vƒÉn b·∫£n tr√≠ch xu·∫•t
extracted_text = ""

# X·ª≠ l√Ω t·∫£i file v√† tr√≠ch xu·∫•t vƒÉn b·∫£n
if uploaded_file is not None:
    st.success(f"File ƒë√£ t·∫£i l√™n: {uploaded_file.name}")
    file_type = uploaded_file.type

    try:
        if "image" in file_type:
            image = Image.open(uploaded_file)
            st.image(image, caption="H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n", use_column_width=True)
            extracted_text = pytesseract.image_to_string(image)

        elif "pdf" in file_type:
            pdf_reader = PyPDF2.PdfReader(uploaded_file)
            extracted_text = "".join([page.extract_text() for page in pdf_reader.pages if page.extract_text()])

        elif "word" in file_type:
            doc = Document(uploaded_file)
            extracted_text = "\n".join([para.text for para in doc.paragraphs if para.text])

        if extracted_text:
            st.subheader("VƒÉn b·∫£n tr√≠ch xu·∫•t:")
            st.write(extracted_text)
        else:
            st.warning("Kh√¥ng c√≥ vƒÉn b·∫£n n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file n√†y.")

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

# T·∫°o c√¢u h·ªèi t·ª´ vƒÉn b·∫£n tr√≠ch xu·∫•t
if st.sidebar.button("T·∫°o c√¢u h·ªèi") and extracted_text:
    user_input = f"T·∫°o {num_questions} {'c√¢u h·ªèi tr·∫Øc nghi·ªám' if question_type == 'C√¢u h·ªèi tr·∫Øc nghi·ªám' else 'c√¢u h·ªèi t·ª± lu·∫≠n'} t·ª´ vƒÉn b·∫£n sau: {extracted_text}."
    
    response = st.session_state.chat.send_message(user_input)
    st.subheader(f"{question_type}:")
    st.markdown(response.text.replace("\n", "\n\n"))

st.divider()

# L·ªãch s·ª≠ tr√≤ chuy·ªán
st.sidebar.title("L·ªãch s·ª≠ tr√≤ chuy·ªán")
if st.session_state.history:
    for message in st.session_state.history:
        st.sidebar.write(message)
        st.sidebar.markdown("---")

# Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")
if user_input:
    st.chat_message("user").markdown(user_input)
    response = st.session_state.chat.send_message(user_input)
    st.session_state.history.append(f"User: {user_input}")
    st.session_state.history.append(f"Assistant: {response.text}")
    with st.chat_message("assistant"):
        st.markdown(response.text)